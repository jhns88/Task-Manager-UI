{"version":3,"sources":["Arch/Router.ts","Pages/Tasks/Common.ts","Arch/Storages/TaskStorage.ts","Pages/Tasks/Form.tsx","Pages/Tasks/List.tsx","Components/Router.tsx","App.tsx","index.tsx"],"names":["Router","pageChangeListeners","page","props","id","this","listener","Math","random","toString","substr","instance","undefined","CommonTaskPage","require","default","TaskStorage","tasks","Promise","resolve","Object","values","task","keys","length","DEFAULT","Form","state","saveTask","tasktext","done","then","getInstance","switchPage","List","getTasks","getTask","setState","event","target","value","Header","as","Divider","Input","placeholder","onChange","e","storeInput","Button","onClick","primary","React","PureComponent","loadTasks","JSON","stringify","taskId","deleteTask","rawItems","list","parse","filter","item","map","style","height","display","marginLeft","basic","size","markTaskAsDone","color","icon","performTaskFormOpen","Icon","name","markTaskAsUndone","listdata","Loader","active","inline","renderListItems","mounted","pageChangeListenerRefId","defaultPage","CoreRouter","addOnPageChangeListener","unsubscribePageChangeListener","pages","App","pageName","Menu","fixed","inverted","Container","Item","header","marginTop","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abea1641.chunk.js","sourcesContent":["type PageChangeListenerFunc = (page: string, props: object) => void;\n\ninterface PageChangeListener {\n    [key: string]: PageChangeListenerFunc;\n}\n\n/**\n * The router which allows to change app page context.\n */\nexport class Router {\n\n    /**\n     * The router singleton instance.\n     */\n    private static instance: (Router | undefined);\n\n    /**\n     * A list of page change listeners.\n     */\n    private pageChangeListeners: PageChangeListener = {};\n\n    /**\n     * Returns the router instance.\n     */\n    public static getInstance(): Router {\n        let instance: (Router | undefined) = Router.instance\n\n        // create instance on demand\n        if (instance === undefined) {\n            instance = Router.instance = new Router();\n        }\n\n        return instance;\n    }\n\n    /**\n     * Allows to switch the page.\n     */\n    public switchPage(page: string, props: object = {}): void {\n        for (let id in this.pageChangeListeners) {\n            this.pageChangeListeners[id](page, props);\n        }\n    }\n\n    /**\n     * Allows to add an page change listener to the router and returns a ref id which allows\n     * to clear the listener afterwards.\n     */\n    public addOnPageChangeListener(listener: PageChangeListenerFunc): string {\n        const id: string = Math.random().toString(36).substr(2, 9);\n\n        this.pageChangeListeners[id] = listener;\n\n        return id;\n    }\n\n    /**\n     * Unsubscribes listener with id.\n     */\n    public unsubscribePageChangeListener(id: string): void {\n        delete this.pageChangeListeners[id];\n    }\n}\n","export enum CommonTaskPage {\n    Form = \"task.form\",\n    List = \"task.list\"\n}\n","import {Task} from \"../Task\";\nimport {AxiosResponse} from \"axios\";\nimport {Router} from \"../Router\";\nimport {CommonTaskPage} from \"../../Pages/Tasks/Common\";\n\nconst axios  = require('axios').default;\n\ninterface Tasks {\n    [key: string]: Task;\n}\n\n\n// process.env.NODE_ENV Disabled during presentation purpose\nconst syncWithBackend: boolean = false;\n\n/**\n * Stores and synchronizes tasks.\n */\nexport class TaskStorage {\n\n    /**\n     * A single default task storage instance.\n     */\n    public static DEFAULT = new TaskStorage();\n\n    /**\n     * The internal tasks cache.\n     */\n    private tasks: Tasks = {};\n\n    /**\n     * Loads available tasks from the server.\n     */\n    public getTasks(): Promise<Task[]> {\n        return new Promise<Task[]>(resolve => {\n            if (syncWithBackend === true) {\n                axios({\n                    \"method\": 'get',\n                    \"url\": process.env.REACT_APP_SERVER_URL + \"/tasks\"\n                }).then((response: AxiosResponse) => {\n                    resolve(response.data);\n                });\n            } else {\n                resolve(Object.values(this.tasks));\n            }\n        });\n    }\n\n    /**\n     * Loads available tasks from the server.\n     */\n    private syncTasksFromServer(): Promise<Task[]> {\n        return new Promise<Task[]>(resolve => {\n            if (syncWithBackend === true) {\n                axios({\n                    \"method\": 'get',\n                    \"url\": process.env.REACT_APP_SERVER_URL + \"/tasks\"\n                }).then((response: AxiosResponse) => {\n                    // reset\n                    this.tasks = {};\n\n                    response.data.forEach((task: Task) => {\n                        this.tasks[task.id as number] = task;\n                    });\n\n                    resolve(Object.values(this.tasks));\n                });\n            } else {\n                resolve(Object.values(this.tasks));\n            }\n        });\n    }\n\n    public getTask(id: number): (Task | undefined) {\n        return this.tasks[id];\n    }\n\n    public saveTask(task: Task): Promise<void> {\n        return new Promise(resolve => {\n            const idAssigned: boolean = (task.id !== undefined);\n            const id: number = (task.id ?? Object.keys(this.tasks).length);\n\n            task.id = id;\n            this.tasks[id] = task;\n\n            // synchronize with backend on production env\n            if (syncWithBackend === true) {\n                axios({\n                    \"method\": (idAssigned === true ? 'put' : \"post\"),\n                    \"url\": process.env.REACT_APP_SERVER_URL + '/tasks' + task.id,\n                    \"crossdomain\": true,\n                    \"data\": task\n                }).then((response: AxiosResponse) => {\n                    this.syncTasksFromServer()\n                        .finally(() => {\n                            resolve();\n                        })\n                    ;\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Allows to delete a task.\n     */\n    public deleteTask(id: number): Promise<void> {\n        return new Promise(resolve => {\n            delete this.tasks[id];\n\n            if (syncWithBackend === true) {\n                axios({\n                    \"method\": 'delete',\n                    \"url\": process.env.REACT_APP_SERVER_URL + '/tasks/' + id,\n                    \"crossdomain\": true\n                }).then(() => {\n                    resolve();\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Resets the task storage.\n     */\n    public reset(): TaskStorage {\n        this.tasks = {};\n        return this;\n    }\n}\n","import React from \"react\";\nimport {Button, Header, Divider, Input} from \"semantic-ui-react\";\nimport {AxiosResponse} from \"axios\";\nimport {Router} from \"../../Arch/Router\";\nimport {CommonTaskPage} from \"./Common\";\nimport {TaskStorage} from \"../../Arch/Storages/TaskStorage\";\nimport {Task} from \"../../Arch/Task\";\n\n/**\n * The task form props.\n */\nexport interface FormProps {\n    id?: number;\n}\n\n/**\n * The task form component states.\n */\ninterface FormStates {\n    id?: number;\n    tasktext?: (string | undefined);\n    done?: boolean;\n}\n\nconst axios = require('axios').default;\n\n/**\n * The task form implementation.\n */\nexport class Form extends React.PureComponent<FormProps, FormStates> {\n\n    /**\n     * The task form component constructor.\n     */\n    public constructor(props: FormProps) {\n        super(props);\n\n        this.state = {\n            \"id\": props.id,\n            \"tasktext\": \"\",\n            \"done\": false\n        };\n    }\n\n    /**\n     * Performs a task save action.\n     */\n    private saveTask(): void {\n        TaskStorage.DEFAULT.saveTask({\n            \"id\": this.state.id,\n            \"tasktext\": (this.state.tasktext ?? \"\"),\n            \"done\": (this.state.done ?? false)\n        }).then(() => {\n            Router.getInstance().switchPage(CommonTaskPage.List);\n        });\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public componentDidMount() {\n        const id: (number | undefined) = this.state.id;\n\n        // load data\n        if (id !== undefined) {\n            TaskStorage.DEFAULT.getTasks()\n                .then(() => {\n                    const task: (Task | undefined) = TaskStorage.DEFAULT.getTask(id);\n                    task !== undefined && this.setState(task);\n                })\n            ;\n        }\n    }\n\n    /**\n     * Stores the current task value to allow controlled input component.\n     */\n    private storeInput(event: React.ChangeEvent<HTMLInputElement>): void {\n        this.setState({\n            \"tasktext\": event.target.value\n        });\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public render() {\n        return (\n            <div>\n                <Header as='h1'>{this.state.id !== undefined ? \"Edit Task\" : \"Create Task\"}</Header>\n                <Divider/>\n                <Input placeholder='Task' onChange={e => this.storeInput(e)} value={this.state.tasktext} />\n                <Divider/>\n                <div>\n                    <Button onClick={() => this.saveTask()} primary>Save</Button>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {Router} from \"../../Arch/Router\";\nimport {CommonTaskPage} from \"./Common\";\nimport {Divider, Button, Header, Loader, Icon} from \"semantic-ui-react\";\nimport {TaskStorage} from \"../../Arch/Storages/TaskStorage\";\nimport {Task} from \"../../Arch/Task\";\n\ninterface ListProps {\n    // nothing special yet\n}\n\ninterface ListStates {\n    listdata?: string; // the list item data as json string\n}\n\n/**\n *\n */\nexport class List extends React.PureComponent<ListProps, ListStates> {\n\n    /**\n     * The task list constructor.\n     */\n    constructor(props: ListProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public componentDidMount() {\n        this.loadTasks();\n    }\n\n    /**\n     * Load tasks for the task list.\n     */\n    private loadTasks(): void {\n        TaskStorage.DEFAULT.getTasks()\n            .then(tasks => {\n                this.setState({\n                    \"listdata\": JSON.stringify(tasks)\n                });\n            })\n        ;\n    }\n\n    private markTaskAsDone(taskId: number): void {\n        const task: (Task | undefined) = TaskStorage.DEFAULT.getTask(taskId);\n\n        if (task !== undefined) {\n            task.done = true;\n            TaskStorage.DEFAULT.saveTask(task)\n                .then(() => this.loadTasks())\n            ;\n        }\n    }\n\n    private markTaskAsUndone(taskId: number): void {\n        const task: (Task | undefined) = TaskStorage.DEFAULT.getTask(taskId);\n\n        if (task !== undefined) {\n            task.done = false;\n            TaskStorage.DEFAULT.saveTask(task)\n                .then(() => this.loadTasks())\n            ;\n        }\n    }\n\n    /**\n     * Performs a task deletion.\n     */\n    private deleteTask(taskId: number): void {\n        TaskStorage.DEFAULT.deleteTask(taskId)\n            .then(() => this.loadTasks())\n        ;\n    }\n\n    /**\n     * Renders the list items.\n     */\n    private renderListItems(rawItems: string): JSX.Element {\n        const list: Task[] = JSON.parse(rawItems);\n\n        return (\n            <div>\n                <Header as='h4'>Open Tasks:</Header>\n                <div>\n                    <ul>\n                        {list\n                            .filter(item => item.done === false)\n                            .map(item => {\n                                return (\n                                    <li style={{height: 50}} key={item.id}>\n                                        <div style={{display: \"inline\"}}>\n                                            {item.tasktext}\n                                        </div>\n                                        <div style={{display: \"inline\", marginLeft: \"1rem\"}}>\n                                            <Button basic size='mini' onClick={() => this.markTaskAsDone(item.id as number)} primary>Done</Button>\n                                        </div>\n                                        <Button basic color={\"green\"} size={\"mini\"} icon onClick={() => this.performTaskFormOpen(item.id as number)}>\n                                            <Icon name='pencil alternate' />\n                                        </Button>\n                                    </li>\n                                )}\n                            )\n                        }\n                    </ul>\n                </div>\n                <Divider/>\n\n                <div>\n                    <Header as='h4'>Closed Tasks:</Header>\n                    <div>\n                        <ul>\n                            {list\n                                .filter(item => item.done === true)\n                                .map(item => {\n                                    return (\n                                        <li style={{height: 50}} key={item.id}>\n                                            <div style={{display: \"inline\"}} onClick={() => this.performTaskFormOpen(item.id as number)}>\n                                                {item.tasktext}\n                                            </div>\n                                            <div style={{display: \"inline\", marginLeft: \"1rem\"}}>\n                                                <Button basic size='mini' color={\"grey\"} onClick={() => this.markTaskAsUndone(item.id as number)}>\n                                                    Undone\n                                                </Button>\n                                                <Button basic color={\"green\"} size={\"mini\"} icon onClick={() => this.performTaskFormOpen(item.id as number)}>\n                                                    <Icon name='pencil alternate' />\n                                                </Button>\n                                                <Button basic color={\"red\"} size={\"mini\"} icon onClick={() => this.deleteTask(item.id as number)}>\n                                                    <Icon name='trash alternate outline' />\n                                                </Button>\n                                            </div>\n                                        </li>\n                                    )}\n                                )\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     *\n     */\n    private performTaskFormOpen(id: number): void {\n        Router.getInstance().switchPage(\n            CommonTaskPage.Form,\n            {\n                \"id\": id\n            }\n        );\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public render() {\n        return (\n            <div>\n                <Header as='h1'>Task List</Header>\n                <Divider/>\n                {this.state.listdata === undefined\n                    ? <Loader active inline={true} />\n                    : this.renderListItems(this.state.listdata)\n                }\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {Router as CoreRouter} from \"../Arch/Router\";\n\n/**\n * A defaultPage can be any react component.\n */\ntype PageDefinition = JSX.Element;\n\n\ninterface PageDefinitions {\n\n    /**\n     *\n     */\n    [key: string]: (props: any) => PageDefinition;\n}\n\n/**\n * The router component props\n */\nexport interface RouterProps {\n\n    /**\n     * An object with defaultPage definitions.\n     */\n    pages: PageDefinitions;\n\n    defaultPage: string;\n}\n\nexport interface RouterState {\n    page: string;\n    props: string;\n}\n\n/**\n * A router for resource routing.\n */\nexport class Router extends React.PureComponent<RouterProps, RouterState> {\n\n    /**\n     * TRUE if the router is mounted.\n     */\n    private mounted: boolean = false;\n\n    /**\n     * A reference identifier of the subscribes router page change listener.\n     */\n    private pageChangeListenerRefId: (string | undefined);\n\n    /**\n     * The router constructor.\n     */\n    constructor(props: RouterProps, state: RouterState) {\n        super(props, state);\n\n        this.state = {\n            \"page\": props.defaultPage,\n            \"props\": JSON.stringify({})\n        };\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public componentDidMount(): void {\n        this.mounted = true;\n\n        this.pageChangeListenerRefId = CoreRouter.getInstance().addOnPageChangeListener(\n            (page: string, props: object) => {\n                if (this.mounted === true) {\n                    this.setState({\n                        \"page\": page,\n                        \"props\": JSON.stringify(props)\n                    });\n                }\n            }\n        );\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public componentWillUnmount(): void {\n        this.mounted = false;\n\n        this.pageChangeListenerRefId && CoreRouter.getInstance().unsubscribePageChangeListener(\n            this.pageChangeListenerRefId\n        );\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public render() {\n        return (\n            <div>\n                {this.props.pages[this.state.page](\n                    JSON.parse(this.state.props)\n                )}\n            </div>\n        );\n    }\n}\n","import './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport {Menu, Container, Header} from \"semantic-ui-react\";\nimport {Router as CoreRouter} from \"./Arch/Router\";\nimport {Form as TaskForm, FormProps} from \"./Pages/Tasks/Form\";\nimport {List as TaskList} from \"./Pages/Tasks/List\";\nimport React from \"react\";\nimport {Router} from \"./Components/Router\";\n\ninterface AppProps {\n\n}\n\ninterface AppState {\n    page: string;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\n    /**\n     * Switches the app page.\n     */\n    private switchPage(pageName: string, props: object = {}): void {\n        CoreRouter.getInstance().switchPage(pageName, props);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public render() {\n        return (\n            <div>\n                <Menu fixed='top' inverted>\n                    <Container>\n                        <Menu.Item as='a' header>\n                            Task Manager\n                        </Menu.Item>\n                        <Menu.Item as='a' onClick={() => this.switchPage(\"task.list\")}>Tasks</Menu.Item>\n                        <Menu.Item as='a' onClick={() => this.switchPage(\"task.form\")}>New Task</Menu.Item>\n                    </Container>\n                </Menu>\n\n                <Container style={{ marginTop: '5em' }}>\n                    <Router\n                        defaultPage=\"task.list\"\n                        pages={{\n                            \"task.list\": () => <TaskList/>,\n                            \"task.form\": (props: FormProps) => <TaskForm {...props} />\n                        }}\n                    />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}